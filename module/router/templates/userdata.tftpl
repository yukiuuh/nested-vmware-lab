#cloud-config

users:
  - name: ${user}
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups: sudo, adm, docker, cdrom, dip, lxd
    shell: /bin/bash
    lock_passwd: false
    plain_text_passwd: '${password}'
%{ if length(ssh_authorized_keys) > 0  }
    ssh_authorized_keys:
%{ for key in ssh_authorized_keys ~}
      - ${key}
%{ endfor ~}
%{ else }
# NO AUTHORIZED KEY
%{ endif }

packages:
  - chrony
  - isc-dhcp-server
  - unzip
  - gnupg
  - software-properties-common
  - iptables-persistent
  - frr
  - squid

write_files:
  - content: |
      /pool01/nfs *(rw,async,no_subtree_check,no_root_squash)
    path: /etc/exports
  - content: |
      net.ipv4.ip_forward=1
      net.ipv6.conf.all.forwarding=1
      nf_conntrack_max=131072
    path: /etc/sysctl.d/99-routing.conf
  - content: |
      network:
        version: 2
        ethernets:
          ens192:
%{ if ip_address == "" || ip_address == null ~}
            dhcp4: true
%{ else ~}
            addresses:
              - ${ip_address}/${subnet_mask}
            routes:
              - to: default
                via: ${gateway}
            dhcp4: false
            nameservers:
              addresses:
%{ for nameserver in nameservers ~}
                - ${nameserver}
%{ endfor ~}
%{ endif ~}
          ens224:
            mtu: ${vlan_mtu}
            dhcp4: false
            dhcp6: false
            addresses: [ "${cidrhost(management_network_address, 1)}/24" ]
        vlans:
%{ for vlan_network in vlan_networks ~}
          vlan.${vlan_network.vlan}:
            id: ${vlan_network.vlan}
            link: ens224
            dhcp6: false
            addresses: [ "${cidrhost(vlan_network.address,1)}/24" ]
            mtu: ${vlan_mtu}
%{ endfor ~}
    path: /etc/netplan/99-static.yaml
    permission: '0600'
  - content: |
      . {
        cache 30
        errors
        loop
        reload
        health
        ready
        hosts /etc/coredns/hosts ${domain} {
          fallthrough
        }
        forward . ${nameservers[0]}
      }
    path: /etc/coredns/Corefile
  - path: /etc/squid/squid.conf
    content: |
      acl localnet src 0.0.0.1-0.255.255.255  # RFC 1122 "this" network (LAN)
      acl localnet src 10.0.0.0/8             # RFC 1918 local private network (LAN)
      acl localnet src 100.64.0.0/10          # RFC 6598 shared address space (CGN)
      acl localnet src 169.254.0.0/16         # RFC 3927 link-local (directly plugged) machines
      acl localnet src 172.16.0.0/12          # RFC 1918 local private network (LAN)
      acl localnet src 192.168.0.0/16         # RFC 1918 local private network (LAN)
      acl localnet src fc00::/7               # RFC 4193 local private network range
      acl localnet src fe80::/10              # RFC 4291 link-local (directly plugged) machines
      acl SSL_ports port 443
      acl Safe_ports port 80          # http
      acl Safe_ports port 21          # ftp
      acl Safe_ports port 443         # https
      acl Safe_ports port 70          # gopher
      acl Safe_ports port 210         # wais
      acl Safe_ports port 1025-65535  # unregistered ports
      acl Safe_ports port 280         # http-mgmt
      acl Safe_ports port 488         # gss-http
      acl Safe_ports port 591         # filemaker
      acl Safe_ports port 777         # multiling http
      acl CONNECT method CONNECT
      http_access allow localhost manager
      http_access deny manager
      include /etc/squid/conf.d/*
      http_access allow localhost
      http_access allow localnet
      http_access deny all
      http_port ${http_proxy_port}
      coredump_dir /var/spool/squid
      refresh_pattern ^ftp:           1440    20%     10080
      refresh_pattern ^gopher:        1440    0%      1440
      refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
      refresh_pattern \/(Packages|Sources)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
      refresh_pattern \/Release(|\.gpg)$ 0 0% 0 refresh-ims
      refresh_pattern \/InRelease$ 0 0% 0 refresh-ims
      refresh_pattern \/(Translation-.*)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
      refresh_pattern .               0       20%     4320
  - content: ${hosts_base64}
    encoding: b64
    path: /etc/coredns/hosts

  - content: |
      [Unit]
      Description=CoreDNS DNS server
      Documentation=https://coredns.io
      After=network.target
      [Service]
      PermissionsStartOnly=true
      LimitNOFILE=1048576
      LimitNPROC=512
      CapabilityBoundingSet=CAP_NET_BIND_SERVICE
      AmbientCapabilities=CAP_NET_BIND_SERVICE
      NoNewPrivileges=true
      User=coredns
      WorkingDirectory=/var/lib/coredns
      ExecStart=/usr/bin/coredns -conf=/etc/coredns/Corefile
      ExecReload=/bin/kill -SIGUSR1 $MAINPID
      Restart=on-failure
      StandardOutput=append:/var/log/coredns.log
      StandardError=append:/var/log/coredns.err.log
      [Install]
      WantedBy=multi-user.target
    path: /etc/systemd/system/coredns.service
  - content: |
      allow 0.0.0.0/0
    path: /etc/chrony/conf.d/99-allow-all.conf
  - content: |
      DHCPDv4_CONF=/etc/dhcp/dhcpd.conf
      INTERFACESv4="ens224"
      INTERFACESv6=""
    path: /etc/default/isc-dhcp-server
  - content: |
      option domain-name "${domain}";
      option domain-name-servers ${cidrhost(management_network_address, 1)};
      default-lease-time 600;
      max-lease-time 7200;
      ddns-update-style none;
      authoritative;
      subnet ${cidrhost(management_network_address, 0)} netmask 255.255.255.0 {
        option routers ${cidrhost(management_network_address, 1)};
        option subnet-mask 255.255.255.0;
        range dynamic-bootp ${cidrhost(management_network_address, 200)} ${cidrhost(management_network_address, 250)};
      }
%{ for enable_dhcp_network in enable_dhcp_networks ~}
      subnet ${enable_dhcp_network.network} netmask ${enable_dhcp_network.netmask} {
        option routers ${enable_dhcp_network.gateway};
        option subnet-mask ${enable_dhcp_network.netmask};
        range dynamic-bootp ${enable_dhcp_network.start_ip} ${enable_dhcp_network.end_ip};
      }
%{ endfor ~}
    path: /etc/dhcp/dhcpd.conf
  - content: |
      PasswordAuthentication yes
    path: /etc/ssh/sshd_config.d/00-allow-password.conf

runcmd:
  - systemctl restart ssh
  - sysctl -p /etc/sysctl.d/99-routing.conf
  - [ "sh" , "-c", "wget https://github.com/coredns/coredns/releases/download/v1.12.0/coredns_1.12.0_linux_amd64.tgz -O - | tar zxvf - -C /usr/bin/" ]
  - netplan apply
  - hostnamectl set-hostname ${hostname}.${domain}
  - iptables -A INPUT -j ACCEPT
  - iptables -A FORWARD -j ACCEPT
  - iptables -t nat -o ens192 -A POSTROUTING -j MASQUERADE
  - iptables -t nat -A PREROUTING -p tcp -i ens192 --dport 10022 -j DNAT --to 10.0.0.2:22
  - iptables -t nat -A PREROUTING -p tcp -i ens192 --dport 3389 -j DNAT --to 10.0.0.2
  - iptables -t nat -A PREROUTING -p udp -i ens192 --dport 3389 -j DNAT --to 10.0.0.2
  - iptables-save > /etc/iptables/rules.v4
  - iptables-restore < /etc/iptables/rules.v4
  - sysctl -p
  - modprobe nf_conntrack
  # DHCP
  - systemctl restart isc-dhcp-server
  # DNS
  - mkdir -p /etc/coredns
  - mkdir -p /var/lib/coredns
  - useradd -l -r -s /usr/sbin/nologin -m -d /var/lib/coredns -c 'CoreDNS user' coredns
  - systemctl stop systemd-resolved
  - systemctl disable systemd-resolved
  - systemctl start coredns
  - systemctl enable coredns
  # NTP
  - systemctl restart chronyd
  - systemctl enable chronyd
  - echo > /var/tmp/provisioned