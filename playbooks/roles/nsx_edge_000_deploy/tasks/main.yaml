- name: Add Edge IP Pool
  ansible.builtin.include_role:
    name: nsx_create_ip_pool
  vars:
    ip_pool:
      name: "{{ edge_tep_ip_pool_name }}"
      start_ip: "{{ edge_tep_ip_pool_start_ip }}"
      end_ip: "{{ edge_tep_ip_pool_end_ip }}"
      cidr: "{{ edge_tep_ip_pool_cidr }}"
      gateway: "{{ edge_tep_ip_pool_gateway }}"

- name: Add Edge Uplink Profile
  ansible.builtin.include_role:
    name: nsx_create_uplink_profile
  vars:
    uplink_profile:
      name: "{{ edge_tep_uplink_profile_name }}"
      vlan: "{{ edge_tep_uplink_vlan }}"

- name: "Creating Uplink Segment"
  vmware.ansible_for_nsxt.nsxt_policy_segment:
    hostname: "{{ nsx_hostname }}"
    username: admin
    password: "{{ nsx_password }}"
    validate_certs: "{{ validate_certs }}"
    display_name: "{{ edge_uplink_segment_name }}"
    domain_name: null
    transport_zone_display_name: "nsx-vlan-transportzone"
    subnets: []
    vlan_ids:
      - "0-4094"
    state: "{{ nsx_state }}"
    do_wait_till_create: true
  register: segment_info
  retries: 30
  delay: 10
  ignore_errors: true
  until: segment_info is succeeded

- name: "Creating external Uplink Segment"
  vmware.ansible_for_nsxt.nsxt_policy_segment:
    hostname: "{{ nsx_hostname }}"
    username: admin
    password: "{{ nsx_password }}"
    validate_certs: "{{ validate_certs }}"
    display_name: "{{ external_uplink_segment_name }}"
    domain_name: null
    transport_zone_display_name: "nsx-vlan-transportzone"
    subnets: []
    do_wait_till_create: true
    vlan_ids:
      - "{{ external_uplink_vlan }}"
    state: "{{ nsx_state }}"

- name: Wait for VLAN segment
  community.vmware.vmware_dvs_portgroup_info:
    hostname: "{{ vc_address }}"
    username: "{{ vc_username }}"
    password: "{{ vc_password }}"
    validate_certs: "{{ validate_certs }}"
    datacenter: "{{ datacenter_name }}"
  register: dvpg_info
  until: dvpg_info.dvs_portgroup_info[nsx_host_switch_name] | json_query(dvpg_query)
  delay: 10
  retries: 30
  vars:
    dvpg_query: "[?portgroup_name=='{{ edge_uplink_segment_name }}']"

- name: Deploy and verify NSX Edge VMs
  ansible.builtin.include_tasks: _retry_handler.yaml
  loop: "{{ edge_vms }}"
  loop_control:
    loop_var: item

- name: List Transport Nodes
  vmware.ansible_for_nsxt.nsxt_transport_nodes_facts:
    hostname: "{{ nsx_hostname }}"
    username: admin
    password: "{{ nsx_password }}"
    validate_certs: "{{ validate_certs }}"

- name: "Workaround for Ryzen"
  community.vmware.vmware_vm_shell:
    hostname: "{{ vc_address }}"
    username: "{{ vc_username }}"
    password: "{{ vc_password }}"
    validate_certs: "{{ validate_certs }}"
    datacenter: "{{ datacenter_name }}"
    cluster: "{{ cluster_name }}"
    vm_id: "{{ item.vmname }}"
    vm_password: "{{ nsx_password }}"
    vm_username: "root"
    vm_shell: /usr/bin/sed
    vm_shell_args: "-i 's/if\ \"AMD\"\ in\ vendor_info/if\ False/' /opt/vmware/nsx-edge/bin/config.py"
    vm_shell_env:
      - "PATH=/bin:/sbin:/usr/bin"
    wait_for_process: true
  loop: "{{ edge_vms }}"

- name: Add edge cluster
  vmware.ansible_for_nsxt.nsxt_edge_clusters:
    hostname: "{{ nsx_hostname }}"
    username: admin
    password: "{{ nsx_password }}"
    validate_certs: "{{ validate_certs }}"
    display_name: "{{ nsx_edge_cluster_name }}"
    cluster_profile_bindings:
      - profile_name: "nsx-default-edge-high-availability-profile"
    members: |
          {% set result = [] %}
          {% for item in edge_vms %}
          {% set _ = result.append({'transport_node_name': item.vmname}) %}
          {% endfor %}
          {{ result }}
    state: "{{ nsx_state }}"
  register: edge_cluster_info
  retries: 60
  delay: 30
  ignore_errors: true
  until: edge_cluster_info is succeeded

- name: Create T0 gateway
  vmware.ansible_for_nsxt.nsxt_policy_tier0:
    hostname: "{{ nsx_hostname }}"
    username: admin
    password: "{{ nsx_password }}"
    validate_certs: "{{ validate_certs }}"
    display_name: "t0"
    state: "{{ nsx_state }}"
    ha_mode: "ACTIVE_STANDBY"
    failover_mode: "PREEMPTIVE"
    do_wait_till_create: true
    locale_services:
      - state: "{{ nsx_state }}"
        display_name: "tier0_ls"
        do_wait_till_create: true
        BGP:
          state: "{{ nsx_state }}"
          local_as_num: "{{ nsx_local_as_num }}"
          neighbors:
            - neighbor_address: "{{ nsx_t0_gateway }}"
              remote_as_num: "{{ nsx_remote_as_num }}"
              state: "{{ nsx_state }}"
              display_name: "{{ nsx_t0_gateway }}"
        edge_cluster_info:
          edge_cluster_display_name: "{{ nsx_edge_cluster_name }}"
        preferred_edge_nodes_info:
          - edge_cluster_display_name: "{{ nsx_edge_cluster_name }}"
            edge_node_display_name: "{{ edge_vms[0].vmname }}"
        interfaces:
          - display_name: "{{ edge_vms[0].vmname }}_interface"
            state: "{{ nsx_state }}"
            subnets: |
              {% set subnets = [] %}
              {% for interface in edge_vms[0].t0_interfaces %}
              {% set _ = subnets.append({'ip_addresses': interface.ip, 'prefix_len': interface.prefix_length}) %}
              {% endfor %}
              {{ subnets }}
            segment_id: "{{ external_uplink_segment_name }}"
            do_wait_till_create: true
            edge_node_info:
              edge_cluster_display_name: "{{ nsx_edge_cluster_name }}"
              edge_node_display_name: "{{ edge_vms[0].vmname }}"
    static_routes:
      - state: "{{ nsx_state }}"
        display_name: "default"
        do_wait_till_create: true
        network: "0.0.0.0/0"
        next_hops:
          - ip_address: "{{ nsx_t0_gateway }}"
